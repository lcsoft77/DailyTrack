@page "/edittask/{activityId?}"
@rendermode InteractiveWebAssembly

@using DailyTrack.Common.Interface
@using System.Linq
@using DailyTrack.Common.ViewModel
@using System.Diagnostics
@inject IActivityWebService _activityService;
@inject NavigationManager Navigation

@using System.Net.Http.Json
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components.Forms
@using static DailyTrack.Domain.Activity


<h3>@(IsEditMode ? "Edit activity" : "New activity")</h3>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="@activity" OnValidSubmit="SaveActivity">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <FluentTextField id="taskName" Label="Name" @bind-Value="activity.Name" />
            </div>
            <ValidationMessage For="@(() => activity.Name)" />

            <div class="mb-3">
                <FluentSelect TOption="ActivitiyTypeViewModel"
                              Label="Select a type"
                              Items="@taskTypes"
                              Id="combo-types"
                              Width="180px"
                              Height="250px"
                              OptionValue="@(p => p.ToString())"
                              OptionText="@(p => p.ToFriendlyString())"
                              @bind-SelectedOption="@activity.Type" />
            </div>
            <div class="mb-3">
                <FluentTextField id="taskDescription" Label="Description" @bind-Value="activity.Description" />
            </div>

            <div class="mb-3">
                <FluentDatePicker Label="Date" @bind-Value="@activity.CreatedAt" />
            </div>

            <p></p>
            @if (activity.Logs != null && activity.Logs.Any())
            {
                <FluentDataGrid Items="@logs" GridTemplateColumns="1fr 1fr" TGridItem="TaskLog">
                    <PropertyColumn Title="Timestamp" Property="@(c => c!.Timestamp.ToString(@"hh\:mm\:ss"))" Align="Align.Start" />
                    <PropertyColumn Title="Status" Property="@(c => c!.Status)" Align="Align.Start" />                    
                </FluentDataGrid>               
            }
            else
            {
                <p>No logs available for this activity.</p>
            }

            <p></p>
            <FluentButton IconStart="@(new Icons.Regular.Size16.Save())" Appearance="Appearance.Accent" Type="ButtonType.Submit">Save</FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size16.Dismiss())" Appearance="Appearance.Accent" OnClick="Cancel">Cancel</FluentButton>
        </EditForm>
    </div>    
</div>

@code {
    private IReadOnlyList<ActivitiyTypeViewModel> taskTypes = Enum.GetValues(typeof(ActivitiyTypeViewModel)).Cast<ActivitiyTypeViewModel>().ToList();
    private ActivityViewModel activity = new ActivityViewModel { Type = ActivitiyTypeViewModel.Other, CreatedAt = DateTime.Today };
    private IQueryable<TaskLog> logs;
    private bool IsEditMode => !string.IsNullOrEmpty(activityId);
    private string activityId;

    private DateTime? SelectedValue = DateTime.Today.AddDays(-2);

    [Parameter]
    public string ActivityId
    {
        get => activityId;
        set
        {
            activityId = value;
            _ = LoadActivity();
        }
    }

    private async Task LoadActivity()
    {
        if (IsEditMode && !string.IsNullOrEmpty(activityId))
        {
            var guid = Guid.Parse(activityId);
            activity = await _activityService.GetActivityById(guid);
            logs = activity.Logs.AsQueryable();
            StateHasChanged();
        }
    }

    private async Task SaveActivity()
    {
        if (IsEditMode)
        {
            await _activityService.UpdateActivity(activity);
        }
        else
        {
            await _activityService.AddActivity(new ActivitiyNewViewModel
                {
                    Name = activity.Name,
                    Description = activity.Description,
                    CreatedAt = activity.CreatedAt.GetValueOrDefault(),
                    Type = activity.Type,
                });
        }

        Navigation.NavigateTo("/");
    }

    private string GetSubmitButtonText() => IsEditMode ? "Save" : "New activity";

    private void Cancel()
    {
        Navigation.NavigateTo("/");
    }
}
